
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\004\004\000\002\006\003\000\002\006\002" +
    "\000\002\005\004\000\002\005\003\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\010\003\000\002\010\002\000\002\011\004\000\002\011" +
    "\003\000\002\012\013\000\002\012\013\000\002\012\013" +
    "\000\002\012\013\000\002\023\003\000\002\023\002\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\025\004\000\002\025\002\000\002\013" +
    "\003\000\002\013\002\000\002\014\004\000\002\014\003" +
    "\000\002\015\006\000\002\015\007\000\002\015\003\000" +
    "\002\015\005\000\002\015\004\000\002\021\012\000\002" +
    "\022\012\000\002\022\006\000\002\022\002\000\002\017" +
    "\004\000\002\017\002\000\002\020\004\000\002\020\002" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\004\005\001\002\000\004\002\227\001" +
    "\002\000\004\006\006\001\002\000\004\007\011\001\002" +
    "\000\004\005\010\001\002\000\004\002\000\001\002\000" +
    "\004\010\012\001\002\000\016\011\ufffc\012\ufffc\013\021" +
    "\014\020\015\017\016\022\001\002\000\006\011\ufffd\012" +
    "\ufffd\001\002\000\016\011\ufffa\012\ufffa\013\021\014\020" +
    "\015\017\016\022\001\002\000\004\011\225\001\002\000" +
    "\006\011\ufff4\012\033\001\002\000\004\007\031\001\002" +
    "\000\004\007\027\001\002\000\004\007\025\001\002\000" +
    "\004\007\023\001\002\000\004\021\024\001\002\000\016" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\001" +
    "\002\000\004\021\026\001\002\000\016\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\001\002\000\004\021" +
    "\030\001\002\000\016\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\001\002\000\004\021\032\001\002\000" +
    "\016\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\001\002\000\012\013\043\014\042\015\040\016\041\001" +
    "\002\000\004\011\ufff5\001\002\000\004\011\ufffe\001\002" +
    "\000\006\011\ufff2\012\033\001\002\000\004\011\ufff3\001" +
    "\002\000\004\007\216\001\002\000\004\007\207\001\002" +
    "\000\004\007\200\001\002\000\004\007\044\001\002\000" +
    "\004\017\045\001\002\000\014\013\050\014\052\015\047" +
    "\016\051\020\uffec\001\002\000\004\020\uffed\001\002\000" +
    "\004\007\176\001\002\000\004\007\174\001\002\000\004" +
    "\007\172\001\002\000\004\007\166\001\002\000\004\020" +
    "\054\001\002\000\004\010\055\001\002\000\012\007\060" +
    "\011\uffe4\022\061\032\057\001\002\000\004\011\uffe5\001" +
    "\002\000\004\017\143\001\002\000\006\017\131\023\130" +
    "\001\002\000\014\007\071\017\072\021\073\030\067\031" +
    "\070\001\002\000\012\007\060\011\uffe2\022\061\032\057" +
    "\001\002\000\012\007\uffdf\011\uffdf\022\uffdf\032\uffdf\001" +
    "\002\000\004\011\065\001\002\000\006\011\ufff1\012\ufff1" +
    "\001\002\000\004\011\uffe3\001\002\000\040\020\uffc8\021" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\001\002\000\040\020\uffc7\021\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\001\002\000\040" +
    "\020\uffc6\021\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\001\002\000\012\007\071\017\072\030" +
    "\067\031\070\001\002\000\012\007\uffdd\011\uffdd\022\uffdd" +
    "\032\uffdd\001\002\000\034\021\110\024\111\025\102\026" +
    "\103\027\100\035\104\036\101\037\075\040\105\041\076" +
    "\042\106\043\107\044\077\001\002\000\012\007\071\017" +
    "\072\030\067\031\070\001\002\000\012\007\071\017\072" +
    "\030\067\031\070\001\002\000\012\007\071\017\072\030" +
    "\067\031\070\001\002\000\012\007\071\017\072\030\067" +
    "\031\070\001\002\000\012\007\071\017\072\030\067\031" +
    "\070\001\002\000\012\007\071\017\072\030\067\031\070" +
    "\001\002\000\012\007\071\017\072\030\067\031\070\001" +
    "\002\000\012\007\071\017\072\030\067\031\070\001\002" +
    "\000\012\007\071\017\072\030\067\031\070\001\002\000" +
    "\012\007\071\017\072\030\067\031\070\001\002\000\012" +
    "\007\071\017\072\030\067\031\070\001\002\000\012\007" +
    "\uffde\011\uffde\022\uffde\032\uffde\001\002\000\012\007\071" +
    "\017\072\030\067\031\070\001\002\000\040\020\uffd1\021" +
    "\uffd1\024\uffd1\025\uffd1\026\103\027\100\035\uffd1\036\uffd1" +
    "\037\uffd1\040\105\041\076\042\106\043\107\044\077\045" +
    "\uffd1\001\002\000\040\020\uffca\021\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\077\045\uffca\001\002\000\040" +
    "\020\uffcb\021\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\077\045\uffcb\001\002\000\040\020\uffcd\021\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\077\045\uffcd\001" +
    "\002\000\036\020\uffd2\021\uffd2\024\111\025\102\026\103" +
    "\027\100\036\uffd2\037\uffd2\040\105\041\076\042\106\043" +
    "\107\044\077\045\uffd2\001\002\000\040\020\uffcf\021\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\105\041\076\042\106\043\107\044\077\045\uffcf" +
    "\001\002\000\040\020\uffd0\021\uffd0\024\uffd0\025\uffd0\026" +
    "\103\027\100\035\uffd0\036\uffd0\037\uffd0\040\105\041\076" +
    "\042\106\043\107\044\077\045\uffd0\001\002\000\040\020" +
    "\uffd3\021\uffd3\024\111\025\102\026\103\027\100\035\104" +
    "\036\uffd3\037\uffd3\040\105\041\076\042\106\043\107\044" +
    "\077\045\uffd3\001\002\000\040\020\uffce\021\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\105\041\076\042\106\043\107\044\077\045\uffce\001\002" +
    "\000\040\020\uffc9\021\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\001\002\000\040\020\uffcc\021" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\077\045" +
    "\uffcc\001\002\000\040\020\uffd4\021\uffd4\024\111\025\102" +
    "\026\103\027\100\035\104\036\101\037\uffd4\040\105\041" +
    "\076\042\106\043\107\044\077\045\uffd4\001\002\000\034" +
    "\020\127\024\111\025\102\026\103\027\100\035\104\036" +
    "\101\037\075\040\105\041\076\042\106\043\107\044\077" +
    "\001\002\000\040\020\uffc5\021\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\001\002\000\012\007" +
    "\071\017\072\030\067\031\070\001\002\000\014\007\071" +
    "\017\072\020\uffd7\030\067\031\070\001\002\000\004\020" +
    "\137\001\002\000\036\020\uffd5\024\111\025\102\026\103" +
    "\027\100\035\104\036\101\037\075\040\105\041\076\042" +
    "\106\043\107\044\077\045\134\001\002\000\014\007\071" +
    "\017\072\020\uffd7\030\067\031\070\001\002\000\004\020" +
    "\uffd8\001\002\000\004\020\uffd6\001\002\000\004\021\140" +
    "\001\002\000\012\007\uffe0\011\uffe0\022\uffe0\032\uffe0\001" +
    "\002\000\034\021\142\024\111\025\102\026\103\027\100" +
    "\035\104\036\101\037\075\040\105\041\076\042\106\043" +
    "\107\044\077\001\002\000\012\007\uffe1\011\uffe1\022\uffe1" +
    "\032\uffe1\001\002\000\012\007\071\017\072\030\067\031" +
    "\070\001\002\000\034\020\145\024\111\025\102\026\103" +
    "\027\100\035\104\036\101\037\075\040\105\041\076\042" +
    "\106\043\107\044\077\001\002\000\004\010\146\001\002" +
    "\000\012\007\060\011\uffe4\022\061\032\057\001\002\000" +
    "\004\011\150\001\002\000\016\007\uffd9\011\uffd9\022\uffd9" +
    "\032\uffd9\033\151\034\153\001\002\000\004\017\157\001" +
    "\002\000\012\007\uffdc\011\uffdc\022\uffdc\032\uffdc\001\002" +
    "\000\004\010\154\001\002\000\012\007\060\011\uffe4\022" +
    "\061\032\057\001\002\000\004\011\156\001\002\000\012" +
    "\007\uffda\011\uffda\022\uffda\032\uffda\001\002\000\012\007" +
    "\071\017\072\030\067\031\070\001\002\000\034\020\161" +
    "\024\111\025\102\026\103\027\100\035\104\036\101\037" +
    "\075\040\105\041\076\042\106\043\107\044\077\001\002" +
    "\000\004\010\162\001\002\000\012\007\060\011\uffe4\022" +
    "\061\032\057\001\002\000\004\011\164\001\002\000\016" +
    "\007\uffd9\011\uffd9\022\uffd9\032\uffd9\033\151\034\153\001" +
    "\002\000\012\007\uffdb\011\uffdb\022\uffdb\032\uffdb\001\002" +
    "\000\006\020\uffe6\045\170\001\002\000\004\020\uffea\001" +
    "\002\000\012\013\050\014\052\015\047\016\051\001\002" +
    "\000\004\020\uffe7\001\002\000\006\020\uffe6\045\170\001" +
    "\002\000\004\020\uffe8\001\002\000\006\020\uffe6\045\170" +
    "\001\002\000\004\020\uffeb\001\002\000\006\020\uffe6\045" +
    "\170\001\002\000\004\020\uffe9\001\002\000\004\017\201" +
    "\001\002\000\014\013\050\014\052\015\047\016\051\020" +
    "\uffec\001\002\000\004\020\203\001\002\000\004\010\204" +
    "\001\002\000\012\007\060\011\uffe4\022\061\032\057\001" +
    "\002\000\004\011\206\001\002\000\006\011\ufff0\012\ufff0" +
    "\001\002\000\004\017\210\001\002\000\014\013\050\014" +
    "\052\015\047\016\051\020\uffec\001\002\000\004\020\212" +
    "\001\002\000\004\010\213\001\002\000\012\007\060\011" +
    "\uffe4\022\061\032\057\001\002\000\004\011\215\001\002" +
    "\000\006\011\uffee\012\uffee\001\002\000\004\017\217\001" +
    "\002\000\014\013\050\014\052\015\047\016\051\020\uffec" +
    "\001\002\000\004\020\221\001\002\000\004\010\222\001" +
    "\002\000\012\007\060\011\uffe4\022\061\032\057\001\002" +
    "\000\004\011\224\001\002\000\006\011\uffef\012\uffef\001" +
    "\002\000\004\005\uffff\001\002\000\006\011\ufffb\012\ufffb" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\014\005" +
    "\012\006\015\007\013\001\001\000\002\001\001\000\006" +
    "\005\225\007\013\001\001\000\002\001\001\000\010\010" +
    "\034\011\033\012\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\036\012\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\052\024" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\063\014\055\015\061" +
    "\021\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\073\001\001\000\010\014\065" +
    "\015\061\021\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\124" +
    "\001\001\000\004\016\123\001\001\000\004\016\122\001" +
    "\001\000\004\016\121\001\001\000\004\016\120\001\001" +
    "\000\004\016\117\001\001\000\004\016\116\001\001\000" +
    "\004\016\115\001\001\000\004\016\114\001\001\000\004" +
    "\016\113\001\001\000\004\016\112\001\001\000\002\001" +
    "\001\000\004\016\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\140\001\001\000\006\016\132\017\131\001\001\000" +
    "\002\001\001\000\004\020\134\001\001\000\006\016\132" +
    "\017\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\146\014\055\015\061\021\062" +
    "\001\001\000\002\001\001\000\004\022\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\154\014\055\015\061\021\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\162\014\055\015" +
    "\061\021\062\001\001\000\002\001\001\000\004\022\164" +
    "\001\001\000\002\001\001\000\004\025\166\001\001\000" +
    "\002\001\001\000\004\024\170\001\001\000\002\001\001" +
    "\000\004\025\172\001\001\000\002\001\001\000\004\025" +
    "\174\001\001\000\002\001\001\000\004\025\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\201\024" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\204\014\055\015\061\021\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\210" +
    "\024\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\213\014\055\015\061\021\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\217\024\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\222\014\055\015\061\021\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String[] args) throws Exception {
        System.out.println("Parser básico funcionando");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= inicio_programa clase fin_programa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // clase ::= palabra_clase identificador llave_apertura cuerpo llave_cierre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= declaraciones_opt metodos_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_opt ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaraciones_simple declaraciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaraciones_simple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones_simple ::= tipo_entero identificador punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones_simple",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaraciones_simple ::= tipo_cadena identificador punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones_simple",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaraciones_simple ::= tipo_decimal identificador punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones_simple",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaraciones_simple ::= tipo_booleano identificador punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciones_simple",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodos_opt ::= metodos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodos_opt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // metodos_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodos_opt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // metodos ::= metodo metodos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodos ::= metodo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodos",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodo ::= palabra_funcion tipo_entero identificador parentesis_apertura parametros_opt parentesis_cierre llave_apertura sentencias_opt llave_cierre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= palabra_funcion tipo_cadena identificador parentesis_apertura parametros_opt parentesis_cierre llave_apertura sentencias_opt llave_cierre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodo ::= palabra_funcion tipo_decimal identificador parentesis_apertura parametros_opt parentesis_cierre llave_apertura sentencias_opt llave_cierre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodo ::= palabra_funcion tipo_booleano identificador parentesis_apertura parametros_opt parentesis_cierre llave_apertura sentencias_opt llave_cierre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("metodo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros_opt ::= parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_opt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros_opt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= tipo_entero identificador resto_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= tipo_cadena identificador resto_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= tipo_decimal identificador resto_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= tipo_booleano identificador resto_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // resto_parametros ::= coma parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_parametros",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // resto_parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_parametros",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencias_opt ::= sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_opt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencias_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias_opt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencias",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia ::= identificador igual expresion punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia ::= identificador parentesis_apertura argumentos parentesis_cierre punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia ::= condicional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia ::= palabra_devolver expresion punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia ::= palabra_devolver punto_coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicional ::= palabra_si parentesis_apertura expresion parentesis_cierre llave_apertura sentencias_opt llave_cierre cond_opcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicional",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond_opcional ::= palabra_sino_si parentesis_apertura expresion parentesis_cierre llave_apertura sentencias_opt llave_cierre cond_opcional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_opcional",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond_opcional ::= palabra_sino llave_apertura sentencias_opt llave_cierre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_opcional",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond_opcional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_opcional",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // argumentos ::= expresion resto_argumentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // argumentos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // resto_argumentos ::= coma argumentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_argumentos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // resto_argumentos ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_argumentos",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion operador_or expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion operador_and expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion operador_relacional expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion operador_suma expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion operador_resta expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion operador_multiplicacion expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion operador_division expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion operador_menor expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion operador_mayor expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion operador_menor_igual expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion operador_mayor_igual expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion operador_igual expresion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= cadena 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= identificador 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= parentesis_apertura expresion parentesis_cierre 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
